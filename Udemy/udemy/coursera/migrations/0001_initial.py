# Generated by Django 5.1.4 on 2025-01-20 18:29

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(max_length=32, unique=True)),
                ('category_name_en', models.CharField(max_length=32, null=True, unique=True)),
                ('category_name_ru', models.CharField(max_length=32, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Students',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('students_name', models.CharField(max_length=32)),
                ('image_student', models.ImageField(blank=True, null=True, upload_to='image_students')),
                ('bio_student', models.TextField()),
                ('bio_student_en', models.TextField(null=True)),
                ('bio_student_ru', models.TextField(null=True)),
                ('phone_student', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region='KG')),
                ('gender_student', models.CharField(choices=[('мужкой', 'мужкой'), ('женский', 'женкский'), ('другой', 'другой')], max_length=16)),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teacher_name', models.CharField(max_length=32)),
                ('image_teacher', models.ImageField(upload_to='image_teacher')),
                ('experience', models.TextField()),
                ('experience_en', models.TextField(null=True)),
                ('experience_ru', models.TextField(null=True)),
                ('specialization', models.CharField(max_length=32)),
                ('specialization_en', models.CharField(max_length=32, null=True)),
                ('specialization_ru', models.CharField(max_length=32, null=True)),
                ('gender_teacher', models.CharField(choices=[('мужкой', 'мужкой'), ('женский', 'женкский'), ('другой', 'другой')], max_length=16)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_picture', models.ImageField(upload_to='profile')),
                ('bio', models.TextField()),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region='KG')),
                ('age', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(14), django.core.validators.MaxValueValidator(50)])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_name', models.CharField(max_length=32)),
                ('course_name_en', models.CharField(max_length=32, null=True)),
                ('course_name_ru', models.CharField(max_length=32, null=True)),
                ('description', models.TextField()),
                ('description_en', models.TextField(null=True)),
                ('description_ru', models.TextField(null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateField(auto_now_add=True)),
                ('updated_at', models.DateField(auto_now=True)),
                ('level_course', models.CharField(choices=[('начальный', 'начальный'), ('средний', 'средний'), ('продвинутый', 'продвинутый')], max_length=16)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coursera.category')),
                ('student_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coursera.students')),
                ('created_by', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='coursera.teacher')),
            ],
        ),
        migrations.CreateModel(
            name='Questions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('questions_text', models.TextField()),
                ('questions_text_en', models.TextField(null=True)),
                ('questions_text_ru', models.TextField(null=True)),
                ('question_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coursera.course')),
            ],
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text_option', models.CharField(max_length=50)),
                ('text_option_en', models.CharField(max_length=50, null=True)),
                ('text_option_ru', models.CharField(max_length=50, null=True)),
                ('correct', models.BooleanField()),
                ('questions_op', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coursera.questions')),
            ],
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_exam', models.CharField(max_length=32)),
                ('title_exam_en', models.CharField(max_length=32, null=True)),
                ('title_exam_ru', models.CharField(max_length=32, null=True)),
                ('passing_score', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('duration', models.DurationField(default=datetime.timedelta(seconds=6000))),
                ('course_exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coursera.course')),
                ('questions', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coursera.questions')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coursera.course')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='coursera.review')),
            ],
        ),
        migrations.CreateModel(
            name='StudentReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating_student', models.IntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], null=True)),
                ('comment_student', models.TextField(blank=True, null=True)),
                ('parent_student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='coursera.studentreview')),
                ('student_rev', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coursera.students')),
            ],
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issued_at', models.DateField()),
                ('certificate_url', models.FileField(upload_to='certificate')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coursera.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coursera.students')),
            ],
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_as', models.CharField(max_length=32)),
                ('title_as_en', models.CharField(max_length=32, null=True)),
                ('title_as_ru', models.CharField(max_length=32, null=True)),
                ('description_as', models.TextField()),
                ('description_as_en', models.TextField(null=True)),
                ('description_as_ru', models.TextField(null=True)),
                ('due_date', models.DateField()),
                ('course_as', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coursera.course')),
                ('students_as', models.ManyToManyField(related_name='student_assignment', to='coursera.students')),
            ],
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_name', models.CharField(max_length=64)),
                ('title_name_en', models.CharField(max_length=64, null=True)),
                ('title_name_ru', models.CharField(max_length=64, null=True)),
                ('video_url', models.FileField(blank=True, null=True, upload_to='lesson_video')),
                ('content', models.TextField()),
                ('content_en', models.TextField(null=True)),
                ('content_ru', models.TextField(null=True)),
                ('course_les', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coursera.course')),
                ('teacher_les', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='coursera.teacher')),
            ],
        ),
        migrations.CreateModel(
            name='TeacherReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating_student', models.IntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], null=True)),
                ('comment_teacher', models.TextField(blank=True, null=True)),
                ('parent_teacher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='coursera.teacherreview')),
                ('teachers', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coursera.teacher')),
            ],
        ),
    ]
